#pragma kernel computeGrid
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#pragma kernel compactPointCloud
#pragma kernel optimizePointCloud
#pragma kernel generatePointCloudMicroVoxels
#pragma kernel optimizeMicrovoxels
RWStructuredBuffer<int> indirectChunkArgs2,indirectChunkArgs1;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int> boundingBox;RWStructuredBuffer<int2> pointCloudDataMip3;RWStructuredBuffer<int> gridPointersMip2,gridPointersMip3,pointCloudDataMip1;RWStructuredBuffer<int2> chunkPointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId,chunkPointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float3> chunksCenter;RWStructuredBuffer<int> numPointsInChunk,pointToChunkId;RWStructuredBuffer<float> gridDataLowRes;RWStructuredBuffer<int> volumetricDraw,chunkIdOffset,microvoxelCounters;RWStructuredBuffer<int2> pointCloudDataMip3Opt;RWStructuredBuffer<int> gridPointersMip2Opt,gridPointersMip3Opt;StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;int numChunksX=0,numChunksY=0,numChunksZ=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,maxPointCount=0;float seamOffsetMultiplier=1.,bufferSizeReduceFactor=1.,globalBlendReduce=0.;groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements=0,gs_globalOffset=0;
#include"claySDF.compute"
static const int3 cellTable[]={int3(0,0,0),int3(0,0,1),int3(0,0,2),int3(0,0,3),int3(0,1,0),int3(0,1,1),int3(0,1,2),int3(0,1,3),int3(0,2,0),int3(0,2,1),int3(0,2,2),int3(0,2,3),int3(0,3,0),int3(0,3,1),int3(0,3,2),int3(0,3,3),int3(1,0,0),int3(1,0,1),int3(1,0,2),int3(1,0,3),int3(1,1,0),int3(1,1,1),int3(1,1,2),int3(1,1,3),int3(1,2,0),int3(1,2,1),int3(1,2,2),int3(1,2,3),int3(1,3,0),int3(1,3,1),int3(1,3,2),int3(1,3,3),int3(2,0,0),int3(2,0,1),int3(2,0,2),int3(2,0,3),int3(2,1,0),int3(2,1,1),int3(2,1,2),int3(2,1,3),int3(2,2,0),int3(2,2,1),int3(2,2,2),int3(2,2,3),int3(2,3,0),int3(2,3,1),int3(2,3,2),int3(2,3,3),int3(3,0,0),int3(3,0,1),int3(3,0,2),int3(3,0,3),int3(3,1,0),int3(3,1,1),int3(3,1,2),int3(3,1,3),int3(3,2,0),int3(3,2,1),int3(3,2,2),int3(3,2,3),int3(3,3,0),int3(3,3,1),int3(3,3,2),int3(3,3,3)},localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int x,int i,int f,int y){return x+y*(i+y*f);}uint f(float3 i){uint e=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return e;}uint f(uint i,uint x,uint f,uint y,uint e){uint t=(((i<<6|x)<<6|f)<<6|y)<<8|e;return t;}uint s(uint i,uint x,uint f,uint y,uint e){uint t=(((i<<6|x)<<8|f)<<8|y)<<4|e;return t;}uint f(uint i,uint x,uint e){uint t=(i<<6|x)<<18|e;return t;}uint f(uint f,uint e){uint t=f<<24|e;return t;}void s(int f,out int i[5]){i[4]=f&255,f>>=8,i[3]=f&63,f>>=6,i[2]=f&63,f>>=6,i[1]=f&63,f>>=6,i[0]=f&63;}uint s(float i,float f,float y,float x){uint r=uint(round(i*63.)),u=uint(round(f*63.)),z=uint(round(y*63.)),e=uint((x+1.)*.5*16383.),t=((r<<6|u)<<6|z)<<14|e;return t;}float4 s(uint i){float f=float(i&16383)/16383*2.-1.;i>>=14;float u=float(i&63)/63;i>>=6;float y=float(i&63)/63,r=float(i>>6)/63;return float4(r,y,u,f);}float t(float3 i,float3 e){float3 u=abs(i)-e;return max(u.x,max(u.y,u.z));}float t(float i,float f,float u,float e){float y=max(u-abs(i-f),0.);return min(i,f)-y*y*.25f*e;}float c(float f,float i,float u,float e){float y=max(u-abs(-f-i),0.);return max(-f,i)+y*y*.25*e;}bool c(uint e,uint f){uint x=f*rcp(32);int i=solidsFilter[e*maxSolidsPerVoxelMask+x],u=f-32*x;bool t=false;if(i>>u&1)t=true;return t;}void d(uint e,uint f){uint x=f/32;int t=solidsFilter[e*maxSolidsPerVoxelMask+x],i=f-32*x;solidsFilter[e*maxSolidsPerVoxelMask+x]=t&~(1<<i);}bool c(int f){return f>>0&1;}bool d(int f){return f>>2&1;}bool t(int f){return f>>3&1;}float c(float3 i,float f,float x,uint e,uint y){float u=999.;uint s=y*maxSolidsPerVoxel;float v=999.,z=0.,m=0.;bool g=false;for(uint r=0;r<e;++r){uint n=prefilteredSolidIds[s+r];float3 o=solidsScale[n];float M=(o.x+o.y+o.z)*.333333,a=solidsBlend[n],S=rcp(a);float4 k=solidsAttrs[n];bool p=true;float b=999.;if(d(k.w))x+=abs(a),v=u,u=999.,z=a,m=S,p=false,g=true,a=0.,S=1.;else if(t(k.w))b=u,u=v,a=z,S=m,p=false,g=false;if(p)b=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],o,k,M);if(!c(k.w)){if(a==0.)u=min(b,u);else if(a>0.)u=t(b,u,a,S);else u=c(b,u,abs(a),abs(S));}if(p&&b>x)d(y,r);if(p)x-=abs(a);}return u;}float c(float3 i,float f,float e,out int s,out float3 u,uint x,uint y,uint z){float r=999.;u=float3(1.,1.,1.);uint n=y*maxSolidsPerVoxel;float v=999.,a=0.,m=0.;float3 g=0.;bool p=false;int S=0,M=0;for(uint o=0;o<x;++o){if(!c(y,o)){continue;}uint k=prefilteredSolidIds[n+o];float3 b=solidsScale[k];float D=(b.x+b.y+b.z)*.333333,w=solidsBlend[k],l=rcp(w);float3 X=solidsColor[k];float4 F=solidsAttrs[k];bool Y=true;float Z=999.;if(d(F.w))v=r,r=999.,a=w,m=l,g=u,Y=false,p=true,S=k,M=s;else if(t(F.w))Z=r,r=v,w=a,l=m,k=S,Y=false,p=false;if(Y)Z=computeClayDistanceFunction(solidsType[k],i,solidsPos[k],solidsRot[k],b,F,D);if(!p&&Z<r)s=k;float C=0.;bool h=c(F.w);if(w==0.){C=clamp((r-Z)*e,0.,1.);if(!h)r=min(Z,r);}else if(w>0.){C=1.-clamp(.5+.5*(Z-r)*l,0.,1.);if(!h)r=t(Z,r,w,l);}else{C=1.-clamp(.5+.5*(-Z-r)*l,0.,1.);if(!h)r=c(Z,r,abs(w),abs(l));if(C>.5)s=k;}if(!Y)X=lerp(g,u,C),C=1.-C;u=lerp(u,X,C);}return r;}float3 r(uint i){int u=(i&255)>>0,f=(i&65280)>>8,r=(i&16711680)>>16;return float3(u/255.,f/255.,r/255.);}int3 v(uint i){int f=(i&255)>>0,u=(i&65280)>>8,y=(i&16711680)>>16;return int3(f,u,y);}bool n(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}float i(int4 f){float t=0.;for(uint i=0;i<numSolids;++i)t+=abs(solidsBlend[i]);return t;}float3 i(int3 f,float i){float t=i*.5,u=chunkSize*.5;float3 e=float3(i*f.x-u,i*f.y-u,i*f.z-u)+t;return e;}void d(float3 f,float y,uint i,inout uint x,inout float z){uint e=numSolidsPerChunk[chunkId],u=i*maxSolidsPerVoxel;int c=i*maxSolidsPerVoxelMask;float s=0.,v=0.;bool r=false;float k=0.,a=2.-globalBlendReduce;uint m=0;for(m=0;m<e;++m){uint n=solidsPerChunk[chunkId*maxSolids+m];float g=abs(solidsBlend[n]),M=solidsAttrs[n].w;float3 p=f;if(int(M)>>1&1)p.x=abs(p.x);float3 S=solidsScale[n],o=solidsPos[n];float4 w=solidsRot[n];float3 b=p-o,l=mulQuat(b,w);float Z=t(l,S)-y*1.732;if(Z<a){k+=g;if(k>1.){k=1.;break;}}}float g=a*k;for(m=0;m<e;++m){uint n=solidsPerChunk[chunkId*maxSolids+m];solidsFilter[c+m*rcp(32)]=-1;float3 p=solidsScale[n];float b=solidsAttrs[n].w;float3 Z=f;if(int(b)>>1&1)Z.x=abs(Z.x);float M=abs(solidsBlend[n]);float3 S=solidsPos[n];float4 o=solidsRot[n];float3 w=Z-S,l=mulQuat(w,o);float C=t(l,p)-y*1.732*2.;if(r)s+=g,v+=M;bool D=true;if(d(b))s=0.,v=0.,C=0.,r=true;else if(t(b))g=s,M=v,C=0.,D=false,r=false;if(C<g){prefilteredSolidIds[u+x]=n;x+=1;if(D)z+=g;if(x==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float y=chunkSize*.5,u=chunkSize*.015625,r=chunkSize*.00390625,x=r*.5,z=u*1.732,e=rcp(r);float3 t=float3(u*i.x-y,u*i.y-y,u*i.z-y);int n=f(i.x,i.y,i.z,64);float3 s=chunksCenter[chunkId];uint g=0;float p=0.;float3 b=t+s;d(b,u*.5,n,g,p);float v=c(b,u,p+u,g,n);gridDataLowRes[n]=v;for(uint m=0;m<8;++m){float3 k=t+r*cardinalCellOffset[m];for(uint o=0;o<8;++o){float3 a=k+x*cardinalCellOffset[o];int3 M=(a+y)*e;int S=f(M.x,M.y,M.z,256);gridData[S]=float3(v,0,0);int l=0;float3 w=float3(1.,1.,1.);if(abs(v)<z){float Z=c(a+s,x,e,l,w,g,n,S);int D=solidsClayObjectId[l]+1;gridData[S]=float3(Z,f(w),D);}}}}float n(float f,float t){float i=t-f,u=.5;if(i!=0.)u=f/i;return u;}float2 p(float2 f){float2 e=f.xy>=0.?1.:-1.,i=(1.-abs(f.yx))*e;return i;}float g(float2 i){int u=32;float f=floor(i.x*(u-1)),e=floor(i.y*(u-1)),t=f*u+e;return t;}float k(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:p(f.xy);f.xy=f.xy*.5+.5;float e=g(f.xy);return e;}int d(uint f,uint i,uint x,uint e){int t=f<<24|i<<16|x<<8|e;return t;}uint g(uint i,uint f,uint x,uint e){uint t=((i<<6|f)<<6|x)<<14|e;return t;}uint i(uint i,uint f,uint x,uint e){uint t=((i<<5|f)<<4|x)<<18|e;return t;}float x(float3 i){float e=dot(round(i*255),float3(65536,256,1));return e;}void g(int3 i,float x){if(i.x>254||i.y>254||i.z>254||i.x<1||i.y<1||i.z<1){return;}int e=f(i.x,i.y,i.z,256);float3 u=gridData[e];if(u.z==0.){return;}float s[8];uint t=0;for(int r=0;r<8;++r){int3 M=i+localGridCellCoords[r];int y=f(M.x,M.y,M.z,256);float3 c=gridData[y];if(c.z==0.){return;}s[r]=c.x;if(c.x<=0.)t|=1<<r;}int y=cubeEdgeFlags[t];if(y==0){return;}int k=t*16,m=triangleConnectionTable[k+3];float g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);float3 c=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+4];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);float3 o=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+5];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);float3 b=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m],a=c+o+b,z=cross(b-c,o-c);if(dot(z,z)>0.){m=triangleConnectionTable[k];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);c=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+1];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+2];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);b=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];z+=cross(b-c,o-c);m=triangleConnectionTable[k+6];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);c=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+7];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+8];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);b=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];z+=cross(b-c,o-c);m=triangleConnectionTable[k+9];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);c=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+10];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);o=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];m=triangleConnectionTable[k+11];g=n(s[edgeConnection[m].x],s[edgeConnection[m].y]);b=vertexOffset[edgeConnection[m].x]-g*edgeDirection[m];z+=cross(b-c,o-c);z=normalize(z);a/=3;int w=u.y,M=u.z;float3 S=a-float3(.5,.5,.5);float Z=dot(S,z);float3 R=z;R/=abs(R.x)+abs(R.y)+abs(R.z);R.xy=R.z>=0.?R.xy:p(R.xy);R.xy=R.xy*.5+.5;Z=Z*.5+.5;int3 C=v(w);int D=0;InterlockedAdd(gs_numElements,1,D);if(D<255)gs_pointCloudData[D]=int3(d(i.x,i.y,i.z,uint(round(R.x*255.))),f(uint(round(Z*63.)),uint(round(C.x/256.*63.)),uint(round(C.y/256.*63.)),uint(round(C.z/256.*63.)),uint(round(R.y*255.))),M);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 i:SV_DispatchThreadID,uint t:SV_GroupIndex){if(i.x>254||i.y>254||i.z>254||i.x<1||i.y<1||i.z<1){return;}float e=chunkSize/256;int m=f(i.x,i.y,i.z,256);float3 u=gridData[m];if(u.z==0.){return;}float s[8];uint x=0;for(int r=0;r<8;++r){int3 M=i+localGridCellCoords[r];int y=f(M.x,M.y,M.z,256);float3 c=gridData[y];if(c.z==0.){return;}s[r]=c.x;if(c.x<=0.)x|=1<<r;}int g=cubeEdgeFlags[x];if(g==0){return;}int y=x*16,k=triangleConnectionTable[y+3];float c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);float3 z=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+4];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);float3 o=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+5];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);float3 b=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k],a=z+o+b,S=cross(b-z,o-z);if(dot(S,S)>0.){k=triangleConnectionTable[y];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);z=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+1];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);o=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+2];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);b=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];S+=cross(b-z,o-z);k=triangleConnectionTable[y+6];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);z=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+7];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);o=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+8];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);b=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];S+=cross(b-z,o-z);k=triangleConnectionTable[y+9];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);z=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+10];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);o=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];k=triangleConnectionTable[y+11];c=n(s[edgeConnection[k].x],s[edgeConnection[k].y]);b=vertexOffset[edgeConnection[k].x]-c*edgeDirection[k];S+=cross(b-z,o-z);S=normalize(S);a/=3;int w=u.y,M=u.z;float3 Z=a-float3(.5,.5,.5);float R=dot(Z,S);float3 C=S;C/=abs(C.x)+abs(C.y)+abs(C.z);C.xy=C.z>=0.?C.xy:p(C.xy);C.xy=C.xy*.5+.5;R=R*.5+.5;int3 D=v(w);uint l=0;InterlockedAdd(numPointsInChunk[chunkId],3,l);l/=3;int2 Y=int2(d(i.x,i.y,i.z,uint(round(C.x*255.))),f(uint(round(R*63.)),uint(round(D.x/256.*63.)),uint(round(D.y/256.*63.)),uint(round(D.z/256.*63.)),uint(round(C.y*255.))));chunkPointCloudData[chunkId*maxPointCount+l]=Y;if(storeSolidId==1)chunkPointCloudDataToSolidId[chunkId*maxPointCount+l]=M;}}int4 m(uint f){uint i=f>>24,u=(16711680&f)>>16,y=(65280&f)>>8,z=255&f;return int4(i,u,y,z);}void k(uint f,uint t){uint k=f/5,m=round(float(float(f)/5.-k)*5),i=pointToChunkId[k],s[5];s[0]=i&63;i>>=6;s[1]=i&63;i>>=6;s[2]=i&63;i>>=6;s[3]=i&63;i>>=6;s[4]=i&63;s[m]=t;uint e=(((s[4]<<6|s[3])<<6|s[2])<<6|s[1])<<6|s[0];pointToChunkId[k]=e;}uint m(uint f,uint i){uint c=f/5,u=6*round(float(float(f)/5.-c)*5),e=(1<<6)-1&i>>u;return e;}[numthreads(1,1,1)]void compactPointCloud(int3 f:SV_DispatchThreadID){int i=f.x+f.y*numChunksX+numChunksX*numChunksY*f.z;uint u=numPointsInChunk[i],m;InterlockedAdd(indirectDrawArgs[0],u,m);uint e=u/3;m/=3;for(uint x=0;x<e;++x){uint y=m+x;pointCloudDataMip3[y]=chunkPointCloudData[i*maxPointCount+x];k(y,i);if(storeSolidId==1)pointCloudDataToSolidId[y]=chunkPointCloudDataToSolidId[i*maxPointCount+x];}}[numthreads(1,1,1)]void optimizePointCloud(int3 i:SV_DispatchThreadID){uint f=indirectDrawArgs[0],u=f/3,e=u;for(uint x=0;x<u;++x){int4 s=m(pointCloudDataMip3[x].x);float y=frac(sin(dot(float2(s.x,s.y),float2(12.9898,78.233+s.z)))*43758.5);uint r=round(y*(e-1));e-=1;uint z=m(e,pointToChunkId[e/5]);int2 t=pointCloudDataMip3[e];pointCloudDataMip3[e]=pointCloudDataMip3[r];pointCloudDataMip3[r]=t;uint c=m(r,pointToChunkId[r/5]);k(e,c);k(r,z);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){}float4 a(uint i){int u=(i&255)>>0,f=(i&65280)>>8,s=(i&16711680)>>16;return float4(u/255.,f/255.,s/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 u:SV_DispatchThreadID){float y=chunkSize/64;float3 t=i(u,y);int x=f(u.x,u.y,u.z,64);float3 e=chunksCenter[chunkId];uint s=0;float z=0.;d(t+e,y*.5,x,s,z);float r=y*.25,g=r*.5,M=y*.5,m=chunkSize/256,o=chunkSize*.5;int k=x*maxSolidsPerVoxelMask;for(uint b=0;b<maxSolidsPerVoxelMask;++b)solidsFilter[k+b]=-1;float p=c(t+e,y,z+y,s,x);for(uint n=0;n<8;++n){float3 v=t+r*cardinalCellOffset[n];for(uint S=0;S<8;++S){float3 C=v+g*cardinalCellOffset[S];int3 a=int3(round((C.x+o-g)/m),round((C.y+o-g)/m),round((C.z+o-g)/m));int D=f(a.x,a.y,a.z,256);gridData[D]=float3(0,0,0);int l=0;float3 w=float3(1.,1.,1.);float Z=c(C+e,g,rcp(r),l,w,s,x,D);int Y=solidsClayObjectId[l]+1;gridData[D]=float3(Z,f(w),Y);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void e(int3 i:SV_DispatchThreadID){}float3 a(int3 u,out float3 m){float e=chunkSize/256;int k=f(u.x,u.y,u.z,256);float3 s=gridData[k];m=a(s.y).xyz;float t[8];int x=0,M=0;for(int r=0;r<8;++r){int3 c=u+localGridCellCoords[r];int y=f(c.x,c.y,c.z,256);float3 g=gridData[y];t[r]=g.x;if(g.z==0.){continue;}if(g.x<0.)x|=1<<r;}int c=cubeEdgeFlags[x];float3 y=i(u,e);int g=0;float3 b=float3(0,0,0);for(int z=0;z<12;++z){if((c&1<<z)!=0){float S=t[edgeConnection[z].x],o=t[edgeConnection[z].y],p=n(S,o);b+=y+(vertexOffset[edgeConnection[z].x]-p*edgeDirection[z])*e;g+=1;}}b/=g;return b;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int k=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[k],s,y,x,r,e=chunksCenter[chunkId],t=a(int3(i.x,i.y,i.z),s)+e,c,m,g,z;int n=f(i.x,i.y+1,i.z+1,256);float3 b=gridData[n];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),y)+e;m=a(int3(i.x,i.y+1,i.z+1),x)+e;g=a(int3(i.x,i.y+1,i.z),r)+e;if(u.x>b.x)z=g,g=c,c=z,z=r,r=y,y=z;uint v=meshOutIndices.IncrementCounter();int S=v*3;meshOutPoints[S]=t;meshOutIndices[v][0]=S+outMeshIndexOffset;meshOutColors[S]=float4(s,1);S=v*3+1;meshOutPoints[S]=c;meshOutIndices[v][1]=S+outMeshIndexOffset;meshOutColors[S]=float4(y,1);S=v*3+2;meshOutPoints[S]=m;meshOutIndices[v][2]=S+outMeshIndexOffset;meshOutColors[S]=float4(x,1);v=meshOutIndices.IncrementCounter();S=v*3;meshOutPoints[S]=t;meshOutIndices[v][0]=S+outMeshIndexOffset;meshOutColors[S]=float4(s,1);S=v*3+1;meshOutPoints[S]=m;meshOutIndices[v][1]=S+outMeshIndexOffset;meshOutColors[S]=float4(x,1);S=v*3+2;meshOutPoints[S]=g;meshOutIndices[v][2]=S+outMeshIndexOffset;meshOutColors[S]=float4(r,1);}n=f(i.x+1,i.y,i.z+1,256);b=gridData[n];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y,i.z+1),y)+e;m=a(int3(i.x+1,i.y,i.z+1),x)+e;g=a(int3(i.x+1,i.y,i.z),r)+e;if(u.x<b.x)z=g,g=c,c=z,z=r,r=y,y=z;uint S=meshOutIndices.IncrementCounter();int v=S*3;meshOutPoints[v]=t;meshOutIndices[S][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=S*3+1;meshOutPoints[v]=c;meshOutIndices[S][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(y,1);v=S*3+2;meshOutPoints[v]=m;meshOutIndices[S][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);S=meshOutIndices.IncrementCounter();v=S*3;meshOutPoints[v]=t;meshOutIndices[S][0]=v+outMeshIndexOffset;meshOutColors[v]=float4(s,1);v=S*3+1;meshOutPoints[v]=m;meshOutIndices[S][1]=v+outMeshIndexOffset;meshOutColors[v]=float4(x,1);v=S*3+2;meshOutPoints[v]=g;meshOutIndices[S][2]=v+outMeshIndexOffset;meshOutColors[v]=float4(r,1);}n=f(i.x+1,i.y+1,i.z,256);b=gridData[n];if(sign(u.x)!=sign(b.x)){c=a(int3(i.x,i.y+1,i.z),y)+e;m=a(int3(i.x+1,i.y+1,i.z),x)+e;g=a(int3(i.x+1,i.y,i.z),r)+e;if(u.x>b.x)z=g,g=c,c=z,z=r,r=y,y=z;uint v=meshOutIndices.IncrementCounter();int S=v*3;meshOutPoints[S]=t;meshOutIndices[v][0]=S+outMeshIndexOffset;meshOutColors[S]=float4(s,1);S=v*3+1;meshOutPoints[S]=c;meshOutIndices[v][1]=S+outMeshIndexOffset;meshOutColors[S]=float4(y,1);S=v*3+2;meshOutPoints[S]=m;meshOutIndices[v][2]=S+outMeshIndexOffset;meshOutColors[S]=float4(x,1);v=meshOutIndices.IncrementCounter();S=v*3;meshOutPoints[S]=t;meshOutIndices[v][0]=S+outMeshIndexOffset;meshOutColors[S]=float4(s,1);S=v*3+1;meshOutPoints[S]=m;meshOutIndices[v][1]=S+outMeshIndexOffset;meshOutColors[S]=float4(x,1);S=v*3+2;meshOutPoints[S]=g;meshOutIndices[v][2]=S+outMeshIndexOffset;meshOutColors[S]=float4(r,1);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 i:SV_DispatchThreadID){int k=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;float f=chunkSize*.00390625*seamOffsetMultiplier,u=chunkSize-f,y=chunkSize*.5;float3 e=float3(-(chunkSize*numChunksX*.5)+y+u*i.x,-(chunkSize*numChunksY*.5)+y+u*i.y,-(chunkSize*numChunksZ*.5)+y+u*i.z);chunksCenter[k]=e;int m=k*3,r=updateChunks[k]-1;if(r<-1)r=-1;int x=0;float c=chunkSize*.5,g=2.-globalBlendReduce;for(uint S=0;S<numSolids;++S){float3 s=e;if(checkMirrorX(solidsAttrs[S].w))s.x=abs(s.x);float3 z=solidsPos[S],M=solidsScale[S];float4 o=solidsRot[S];float3 b=s-z,a=mulQuat(b,o);float w=t(a,M)-g;if(abs(w)<chunkSize*.8){solidsPerChunk[k*maxSolids+x]=S;x+=1;if(r<=0){for(uint v=0;v<numSolidsUpdated;++v){uint C=solidsUpdated[v];if(C==S){r=1;break;}}}}}numSolidsPerChunk[k]=x;uint v=0,s=0;if(r>-1){v=64/MAXTHREADS;s=256/MAXTHREADS;uint n=k*6;boundingBox[n]=64;boundingBox[n+1]=64;boundingBox[n+2]=64;boundingBox[n+3]=0;boundingBox[n+4]=0;boundingBox[n+5]=0;numPointsInChunk[k]=0;}updateChunks[k]=r;indirectChunkArgs1[m]=v;indirectChunkArgs1[m+1]=v;indirectChunkArgs1[m+2]=v;indirectChunkArgs2[m]=s;indirectChunkArgs2[m+1]=s;indirectChunkArgs2[m+2]=s;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloudMicroVoxels(int3 i:SV_DispatchThreadID){int e=f(i.x,i.y,i.z,64);uint y=262144,u=chunkId*y,k=u+e;gridPointersMip2[k]=-1;if(gridDataLowRes[e]==999.){return;}float3 m=float3(0,0,0),s=float3(0,0,0),r=float3(0,0,0);int t=0;for(uint x=0;x<64;++x){int3 c=cellTable[x],S=int3(i.x*4+c.x,i.y*4+c.y,i.z*4+c.z);uint b=f(uint(c.x),uint(c.y),uint(c.z),4),z=0;float a[8]={0,0,0,0,0,0,0,0};int M=0,o=0;for(int w=0;w<8;++w){int3 C=S+localGridCellCoords[w];if(C.x<1||C.y<1||C.z<1||C.x>253||C.y>253||C.z>253){return;}int D=f(C.x,C.y,C.z,256);float3 Z=gridData[D];float l=Z.x;if(l==0.){continue;}a[w]=l;if(l<=0.)z|=1<<w,o=Z.z,M=Z.y;}int C=cubeEdgeFlags[z];if(C==0){continue;}int Z=z*16;float3 R=float3(0,0,0),l=float3(0,0,0);int D=0;for(int Y=0;Y<5;++Y){int X=Y*3,I=triangleConnectionTable[Z+X];if(I>-1){float h=n(a[edgeConnection[I].x],a[edgeConnection[I].y]);float3 F=vertexOffset[edgeConnection[I].x]-h*edgeDirection[I];I=triangleConnectionTable[Z+X+1];h=n(a[edgeConnection[I].x],a[edgeConnection[I].y]);float3 O=vertexOffset[edgeConnection[I].x]-h*edgeDirection[I];I=triangleConnectionTable[Z+X+2];h=n(a[edgeConnection[I].x],a[edgeConnection[I].y]);float3 P=vertexOffset[edgeConnection[I].x]-h*edgeDirection[I];R+=F+O+P;l+=cross(P-F,O-F);D+=3;}else{break;}}if(D>0){R/=D;float3 F=R-.5;l=normalize(l);float I=dot(F,l);I=I*.5+.5;m+=R;s+=l;float3 h=l;h/=abs(h.x)+abs(h.y)+abs(h.z);h.xy=h.z>=0.?h.xy:p(h.xy);h.xy=h.xy*.5+.5;int3 X=v(M);float3 P=float3(X.x*.00390625,X.y*.00390625,X.z*.00390625);r+=P;uint O=d(b,uint(round(I*255.)),uint(round(h.x*255.)),uint(round(h.y*255.))),T=g(uint(round(P.x*63.)),uint(round(P.y*63.)),uint(round(P.z*63.)),o),A=e*128+t*2;prefilteredSolidIds[A]=O;prefilteredSolidIds[A+1]=T;t+=1;}}if(t>0){m/=t;s=normalize(s);r/=t;float3 c=m-.5;float S=dot(c,s);S=S*.5+.5;float3 b=s;b/=abs(b.x)+abs(b.y)+abs(b.z);b.xy=b.z>=0.?b.xy:p(b.xy);b.xy=b.xy*.5+.5;uint z=chunkId*(16777216*bufferSizeReduceFactor),o=0;InterlockedAdd(volumetricDraw[7],64,o);for(uint w=0;w<64;++w)gridPointersMip3[z+o+w]=-1;uint a=0;InterlockedAdd(volumetricDraw[6],t+1,a);uint I=0;for(int C=0;C<t;++C){uint Z=e*128+C*2;int2 M=int2(prefilteredSolidIds[Z],prefilteredSolidIds[Z+1]);pointCloudDataMip3[z+a+C+1]=M;I=M.x>>24;gridPointersMip3[z+o+I]=f(C,a);}uint M=uint(round(b.x*255.)),l=uint(round(b.y*255.)),D=uint(round(S*255.)),Z=d(t,M,l,D);int2 Y=int2(o,Z);pointCloudDataMip3[z+a]=Y;gridPointersMip2[k]=a;uint X=chunkId*6;InterlockedMin(boundingBox[X],i.x);InterlockedMin(boundingBox[X+1],i.y);InterlockedMin(boundingBox[X+2],i.z);InterlockedMax(boundingBox[X+3],i.x);InterlockedMax(boundingBox[X+4],i.y);InterlockedMax(boundingBox[X+5],i.z);}}[numthreads(1,1,1)]void optimizeMicrovoxels(int3 i:SV_DispatchThreadID){int k=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;bool u=true;uint e=262144;for(uint x=0;x<e;++x){int s=gridPointersMip2[k*e+x];if(s>-1){u=false;break;}}if(u){return;}uint t=0;InterlockedAdd(microvoxelCounters[0],262144,t);chunkIdOffset[k]=t;uint S=k*(16777216*bufferSizeReduceFactor);for(uint r=0;r<e;++r){int y=gridPointersMip2[k*e+r];gridPointersMip2Opt[t+r]=-1;if(y>-1){int s=0;InterlockedAdd(microvoxelCounters[1],64,s);uint z=m(pointCloudDataMip3[S+y].y).x;for(uint c=0;c<64;++c)gridPointersMip3Opt[s+c]=-1;uint v=0;InterlockedAdd(microvoxelCounters[2],z+1,v);for(uint b=0;b<z;++b){int o=pointCloudDataMip3[S+y+b+1].x>>24;gridPointersMip3Opt[s+o]=f(b,v);pointCloudDataMip3Opt[v+b+1]=pointCloudDataMip3[S+y+b+1];}int2 g=int2(s,pointCloudDataMip3[S+v].y);pointCloudDataMip3Opt[v]=g;gridPointersMip2Opt[t+r]=v;}}}